@page "/Dogs"
@namespace EAD1_CA_3_X00149830
@inject HttpClient Http


<div class="container-fluid text-center">
    <img src="@dogImageURL" alt="@dogType" width="500" height="600">
    <h3>@dogType</h3>

    <input placeholder="Dog Breed" @bind="dogBreed" />

    <button class="btn btn-primary" @onclick="Search">Search</button>
    <button class="btn btn-primary" @onclick="FetchRandomDogImg">Random Dog</button>
</div>


<div class="container-fluid text-center">
    <h3>Previously Seen Dogs </h3>
    @if (seenDogbreeds == null)
    {
        <p><em>Loading data...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Dog Breed</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var breed in seenDogbreeds)
                {
                    <tr>
                        <td>@breed</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
@errormessage

@code {



    private Root data;

    private string errorImageURL = "images/DogNotFound.jpg";
    private string dogType = "";
    private string dogImageURL;
    private string imageURL = "https://dog.ceo/api/breeds/image/random";
    private string errormessage;

    private List<string> seenDogbreeds = new List<string>();

    private string dogBreed;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // CORS needs to be enabled for Web API endpoint
            data = await Http.GetFromJsonAsync<Root>(imageURL);
            dogImageURL = data.Message;

            dogType = data.ExtractDogType(dogImageURL);

            dogType = data.FormatDogType(dogType);

            AddDogBreedToList();

        }
        catch (Exception e)
        {

            errormessage = e.StackTrace;
        }

    }

    protected async void GetDogData()
    {
        try
        {
            // CORS needs to be enabled for Web API endpoint
            data = await Http.GetFromJsonAsync<Root>(imageURL);

            dogImageURL = data.Message;

            dogType = data.ExtractDogType(dogImageURL);

            dogType = data.FormatDogType(dogType);

            AddDogBreedToList();

        }
        catch (Exception e)
        {
            errormessage = e.StackTrace;
        }

        StateHasChanged();

    }

    private void FetchRandomDogImg()
    {
        imageURL = "https://dog.ceo/api/breeds/image/random";
        GetDogData();

        dogImageURL = data.Message;

        dogType = data.ExtractDogType(dogImageURL);

        dogType = data.FormatDogType(dogType);

        AddDogBreedToList();

    }

    private void Search()
    {


        if (!System.String.IsNullOrWhiteSpace(dogBreed))
        {
            dogBreed = dogBreed.ToLower();

            imageURL = string.Format("https://dog.ceo/api/breed/{0}/images/random", dogBreed);
            GetDogData();
            dogImageURL = data.Message;

            dogType = data.ExtractDogType(dogImageURL);

            dogType = data.FormatDogType(dogType);

            AddDogBreedToList();
        }


        else
        {
            dogImageURL = errorImageURL;
            dogType = "Dog Not Found";
        }

    }

    private void AddDogBreedToList()
    {
        if (!seenDogbreeds.Contains(dogType))
        {
            //adds it to front of list so last dog seen is at top of list
            seenDogbreeds.Insert(0, dogType);
        }
    }

}

@*Web API Add Cors
    services.AddCors(o => o.AddPolicy("MyCORSpolicy", builder =>
    {
        builder.AllowAnyOrigin();
    }));*@
@page "/Dogs"

@inject HttpClient Http


<div class="container-fluid text-center">
    <img src="@dogImageURL" alt="@dogType" width="500" height="600">
    <h3>@dogType</h3>

<input placeholder="Dog Breed" @bind="dogBreed" />

    <button class="btn btn-primary" @onclick="Search">Search</button>
    <button class="btn btn-primary" @onclick="FetchRandomDogImg">Random Dog</button>
</div>


<div class="container-fluid text-center">
    <h3>Previously Seen Dogs </h3>
    @if (seenDogbreeds == null)
    {
        <p><em>Loading data...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Dog Breed</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var breed in seenDogbreeds)
                {
                    <tr>
                        <td>@breed</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
@errormessage

@code {


    public class Root
    {
        public string Message { get; set; }
        public string Status { get; set; }
        public int Code { get; set; }
    }

    private Root data;

    private string errorImageURL = "images/DogNotFound.jpg";
    private string dogType = "";
    private string dogImageURL;
    private string imageURL = "https://dog.ceo/api/breeds/image/random";
    private string errormessage;

    private List<string> seenDogbreeds = new List<string>();

    private string dogBreed;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // CORS needs to be enabled for Web API endpoint
            data = await Http.GetFromJsonAsync<Root>(imageURL);
            dogImageURL = data.Message;

            ExtractDogType();

            FormatDogType();

            AddDogBreedToList();
        }
        catch (Exception e)
        {
            errormessage = e.StackTrace;
        }

    }

    protected async void GetDogData()
    {
        try
        {
            // CORS needs to be enabled for Web API endpoint
            data = await Http.GetFromJsonAsync<Root>(imageURL);
            dogImageURL = data.Message;

            ExtractDogType();

            FormatDogType();

            AddDogBreedToList();
        }
        catch (Exception e)
        {
            errormessage = e.StackTrace;
        }

        StateHasChanged();

    }

    //extracts the type of dog from the url by removing leadURL and then removing everything after the /
    private void ExtractDogType()
    {
        string leadURL = "https://images.dog.ceo/breeds/";

        dogType = dogImageURL.Remove(0, leadURL.Length);

        int firstForwardSlash = dogType.IndexOf('/');

        dogType = dogType.Remove(firstForwardSlash);

    }

    //Formats the dog type extracted from the response URL
    private void FormatDogType()
    {
        //Capitalizes the first letter of the dog type
        dogType = char.ToUpper(dogType[0]) + dogType.Substring(1);

        //if the dog type has a sub breed it is joined with a hyphen and the breed is first for example terrier-silky
        //this check for the hyphen, substrings dog type into breed and sub breed, then capitilzes sub breed
        //finally changes dogtype to the more familiar subBreed Breed format we are used to.

        if (dogType.Contains('-'))
        {
            string breed, subBreed;
            int hyphenLoc = dogType.IndexOf('-');
            breed = dogType.Substring(0, hyphenLoc);
            subBreed = dogType.Substring(hyphenLoc + 1);

            subBreed = char.ToUpper(subBreed[0]) + subBreed.Substring(1);

            dogType = subBreed + " " + breed;
        }

    }

    private void FetchRandomDogImg()
    {
        imageURL = "https://dog.ceo/api/breeds/image/random";
        GetDogData();

        if (data.Status == "success")
        {
            dogImageURL = data.Message;

            ExtractDogType();

            FormatDogType();

            AddDogBreedToList();


        }
        else
        {
            dogImageURL = errorImageURL;
            dogType = "Dog Not Found";
        }


    }

    private void Search()
    {
        imageURL = string.Format("https://dog.ceo/api/breed/{0}/images/random", dogBreed);
        GetDogData();

        if (data.Status == "success")
        {
            dogImageURL = data.Message;

            ExtractDogType();

            FormatDogType();

            AddDogBreedToList();

        }
        else
        {
            dogImageURL = errorImageURL;
            dogType = "Dog Not Found";
        }

    }

    private void AddDogBreedToList()
    {
        if (!seenDogbreeds.Contains(dogType))
        {
            //adds it to front of list so last dog seen is at top of list
            seenDogbreeds.Insert(0,dogType);
        }
    }

}

@*Web API Add Cors
    services.AddCors(o => o.AddPolicy("MyCORSpolicy", builder =>
    {
        builder.AllowAnyOrigin();
    }));*@
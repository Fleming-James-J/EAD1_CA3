@page "/randomDog"

@inject HttpClient Http

<h1>Random Dog</h1>
<div class="container">

    <img src="@randomDogImageURL" alt="@dogtype" width="500" height="600">
    <h3>@dogtype</h3>
</div>
<button class="btn btn-primary" @onclick="FetchRandomDogImg">Random Dog</button>

@code {


    public class Root
    {
        public string Message { get; set; }
        public string Status { get; set; }
    }

    private Root data;
    private string randomDogImageURL;
    private string errorImageURL = "images/DogNotFound.jpg";
    private string dogtype = "";

    protected override async Task OnInitializedAsync()
    {

        // CORS needs to be enabled for Web API endpoint
        data = await Http.GetFromJsonAsync<Root>("https://dog.ceo/api/breeds/image/random");
        randomDogImageURL = data.Message;

        ExtractDogType();

        FormatDogType();

    }

    //extracts the type of dog from the url by removing leadURL and then removing everything after the /
    private void ExtractDogType()
    {
        string leadURL = "https://images.dog.ceo/breeds/";

        dogtype = randomDogImageURL.Remove(0, leadURL.Length);

        int firstForwardSlash = dogtype.IndexOf('/');

        dogtype = dogtype.Remove(firstForwardSlash);

    }

    //Formats the dog type extracted from the response URL
    private void FormatDogType()
    {
        //Capitalizes the first letter of the dog type
        dogtype = char.ToUpper(dogtype[0]) + dogtype.Substring(1);

        //if the dog type has a sub breed it is joined with a hyphen and the breed is first for example terrier-silky
        //this check for the hyphen, substrings dog type into breed and sub breed, then capitilzes sub breed
        //finally changes dogtype to the more familiar subBreed Breed format we are used to.

        if (dogtype.Contains('-'))
        {
            string breed, subBreed;
            int hyphenLoc = dogtype.IndexOf('-');
            breed = dogtype.Substring(0, hyphenLoc);
            subBreed = dogtype.Substring(hyphenLoc + 1);

            subBreed = char.ToUpper(subBreed[0]) + subBreed.Substring(1);

            dogtype = subBreed + " " + breed;
        }

    }

    private void FetchRandomDogImg()
    {
        if (data.Status == "success")
        {
            randomDogImageURL = data.Message;

            ExtractDogType();

            FormatDogType();

            Console.WriteLine(randomDogImageURL);
            OnInitializedAsync();
        }
        else
        {
            randomDogImageURL = errorImageURL;
        }


    }

}

@*Web API Add Cors
    services.AddCors(o => o.AddPolicy("MyCORSpolicy", builder =>
    {
        builder.AllowAnyOrigin();
    }));*@